// <auto-generated />
using System;
using CosmeticShop.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CosmeticShop.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210515072954_OrderProcessingAdded")]
    partial class OrderProcessingAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CosmeticShop.Models.AuxiliaryEntities.ProductPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PreviewNnmber")
                        .HasColumnType("int");

                    b.Property<int>("ProductContainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductContainerId")
                        .IsUnique();

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("CosmeticShop.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ByteImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductPicturesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductPicturesId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.EmployeeOrders.OrderProcessing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OrderProcessing");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersToCollectId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersToDeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHistoryId");

                    b.HasIndex("OrdersToCollectId");

                    b.HasIndex("OrdersToDeliveryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderProcessingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderProcessingId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderPresonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("OrderPresonalData");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderProductAccounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountRequiredProducts")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductContainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductContainerId");

                    b.ToTable("OrderProuctAccountings");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToCollect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderProcessingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderProcessingId")
                        .IsUnique();

                    b.ToTable("OrdersToCollect");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderProcessingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderProcessingId")
                        .IsUnique();

                    b.ToTable("OrdersToDelivery");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.ProductContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CountProducts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductContainers");
                });

            modelBuilder.Entity("CosmeticShop.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CosmeticShop.Models.AuxiliaryEntities.ProductPictures", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.ProductContainer", "ProductContainer")
                        .WithOne("ProductPictures")
                        .HasForeignKey("CosmeticShop.Models.AuxiliaryEntities.ProductPictures", "ProductContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductContainer");
                });

            modelBuilder.Entity("CosmeticShop.Models.Picture", b =>
                {
                    b.HasOne("CosmeticShop.Models.AuxiliaryEntities.ProductPictures", "ProductPictures")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductPicturesId");

                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.Order", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.OrderHistory", "OrderHistory")
                        .WithMany("Orders")
                        .HasForeignKey("OrderHistoryId");

                    b.HasOne("CosmeticShop.Models.Products.OrdersToCollect", "OrdersToCollect")
                        .WithMany("Orders")
                        .HasForeignKey("OrdersToCollectId");

                    b.HasOne("CosmeticShop.Models.Products.OrdersToDelivery", "OrdersToDelivery")
                        .WithMany("Orders")
                        .HasForeignKey("OrdersToDeliveryId");

                    b.HasOne("CosmeticShop.Models.Users.User", "User")
                        .WithOne("Order")
                        .HasForeignKey("CosmeticShop.Models.Products.Order", "UserId");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrdersToCollect");

                    b.Navigation("OrdersToDelivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderHistory", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.EmployeeOrders.OrderProcessing", null)
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderProcessingId");

                    b.HasOne("CosmeticShop.Models.Users.User", "User")
                        .WithOne("OrderHistory")
                        .HasForeignKey("CosmeticShop.Models.Products.OrderHistory", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderPresonalData", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.Order", "Order")
                        .WithOne("PersonalData")
                        .HasForeignKey("CosmeticShop.Models.Products.OrderPresonalData", "OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderProductAccounting", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.Order", "Order")
                        .WithMany("OrderProuctAccountings")
                        .HasForeignKey("OrderId");

                    b.HasOne("CosmeticShop.Models.Products.ProductContainer", "ProductContainer")
                        .WithMany("OrderProuctAccountings")
                        .HasForeignKey("ProductContainerId");

                    b.Navigation("Order");

                    b.Navigation("ProductContainer");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToCollect", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.EmployeeOrders.OrderProcessing", "OrderProcessing")
                        .WithOne("OrdersToCollect")
                        .HasForeignKey("CosmeticShop.Models.Products.OrdersToCollect", "OrderProcessingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderProcessing");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToDelivery", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.EmployeeOrders.OrderProcessing", "OrderProcessing")
                        .WithOne("OrdersToDelivery")
                        .HasForeignKey("CosmeticShop.Models.Products.OrdersToDelivery", "OrderProcessingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderProcessing");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.ProductContainer", b =>
                {
                    b.HasOne("CosmeticShop.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany("ProductContainers")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CosmeticShop.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CosmeticShop.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CosmeticShop.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CosmeticShop.Models.AuxiliaryEntities.ProductPictures", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.EmployeeOrders.OrderProcessing", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("OrdersToCollect");

                    b.Navigation("OrdersToDelivery");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.Order", b =>
                {
                    b.Navigation("OrderProuctAccountings");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrderHistory", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToCollect", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.OrdersToDelivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.ProductCategory", b =>
                {
                    b.Navigation("ProductContainers");
                });

            modelBuilder.Entity("CosmeticShop.Models.Products.ProductContainer", b =>
                {
                    b.Navigation("OrderProuctAccountings");

                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("CosmeticShop.Models.Users.User", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("OrderHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
