@model CosmeticShop.Models.Products.Order;
<style>
    body {
        background-color: #1A1310 !important;
    }
</style>

<section class="container-orders create-product-container container-myself-info">

    <h2>Корзина</h2>
    <div class="container-order back-blur">

        <table class="table-order-index ">
            @foreach (var accounting in Model.OrderProuctAccountings)
            {
                <tr>
                    <td>
                        <div class="order">
                            <div class="img-cover">
                                @Html.Raw("<img class=\"card-img card-img-top\"' src=\"data:image/jpeg;base64,"
                            +
                            Convert.ToBase64String(accounting.ProductContainer.ProductPictures.GetPreviewPicture().Result)
                            + "\" />")

                            </div>

                        </div>

                    </td>
                    <td>
                        <div class="text-title-product-name">
                            <p>@accounting.ProductContainer.ProductName</p>
                        </div>
                    </td>
                    <td>
                        <div class="text-title-cost">

                            @{
                                var summaryCost = accounting.ProductContainer.Cost * accounting.CountRequiredProducts;
                            }
                            <p>@summaryCost
                                <br>
                                <small class="text-center">руб.коп.</small>
                            </p>
                        </div>
                    </td>
                    <td>
                        <div class="containter">
                            <input type="button" class="btn-cir" value="-"
                            onclick="decreaseAmount(this.parentElement, @accounting.ProductContainer.CountProducts, @accounting.Id)" />

                            <input type="number" class="btn-count" name="counter" value="@accounting.CountRequiredProducts"
                            style="width: 50px;" />

                            <input type='button' class="btn-cir" value="+"
                            onclick="increaseAmount(this.parentElement, @accounting.ProductContainer.CountProducts, @accounting.Id)" />
                        </div>
                    </td>
                    <td>
                        <a asp-controller="Orders" asp-action="Details" asp-route-id="@accounting.ProductContainer.Id"
                        class="btn btn-info">Просмотр</a>
                    </td>
                    <td>
                        <a asp-action="Delete" asp-controller="Orders" asp-route-id="@accounting.ProductContainer.Id"
                        class="btn btn-outline-danger">Удалить
                            продукт</a>
                    </td>
                </tr>
            }
            <tr style="height: 100px" class="tr-btn">
                <td colspan="7">
                    <form asp-action="Ordering" method="GET">
                        <input name="Id" value="@Model.Id" hidden>
                        <input type="submit" value="Оформить заказ" class="btn btn-outline-pink">
                    </form>
                </td>
            </tr>
        </table>

    </div>
</section>


@*
    <form asp-action="Ordering" method="GET">
    <input name="Id" value="@Model.Id" hidden>
    <input type="submit" value="Оформить заказ">
    </form> *@


<script>
    function increaseAmount(sender, amount, opId) {
        var input = getCounterInput(sender);
        if (isValidCounterValue(parseInt(input.value) + 1, amount)) {
            input.value++;
            sendRequestResetRequiredCount(opId, input.value)
        }
        //else
        //todo show error "Превышено допустимое количество товаров"
    }
    function decreaseAmount(sender, amount, opId) {
        var input = getCounterInput(sender);
        if (isValidCounterValue(parseInt(input.value) - 1, amount)) {
            input.value--;
            sendRequestResetRequiredCount(opId, input.value)
        }
    }
    function isValidCounterValue(value, generalAmount) {
        return parseInt(value) > 0 && value <= parseInt(generalAmount);
    }
    function sendRequestResetRequiredCount(id, counter) {
        var parametres = `id=${id}&counter=${counter}`;
        var queryUrl = `Orders/ChangeRequiredProducts?${parametres}`;

        var xhttp = new XMLHttpRequest();

        xhttp.open("POST", queryUrl, true);
        xhttp.send();
    }
    function getCounterInput(sender) {
        var values = sender.childNodes;
        var counterInput = new Object();

        for (var i = 0; i < values.length; i++) {
            if (values[i].name == "counter") {
                counterInput = values[i];
            }
        }
        return counterInput;
    }
</script>